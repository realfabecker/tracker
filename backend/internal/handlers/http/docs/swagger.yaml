basePath: /api/wallet
definitions:
  EmptyResponseDTO:
    properties:
      code:
        example: 200
        type: integer
      message:
        example: Operação realizada com sucesso
        type: string
      status:
        example: success
        type: string
    type: object
  PagedDTO-Payment:
    properties:
      has_more:
        example: false
        type: boolean
      items:
        items:
          $ref: '#/definitions/Payment'
        type: array
      page_count:
        example: 10
        type: integer
      page_token:
        type: string
    type: object
  PagedDTO-TransactionDetail:
    properties:
      has_more:
        example: false
        type: boolean
      items:
        items:
          $ref: '#/definitions/TransactionDetail'
        type: array
      page_count:
        example: 10
        type: integer
      page_token:
        type: string
    type: object
  Payment:
    description: Payment information
    properties:
      createdAt:
        example: "2023-04-07T16:45:30Z"
        type: string
      description:
        example: Supermercado
        type: string
      dueDate:
        example: "2023-05-07"
        type: string
      id:
        example: 2023050701GXEH91YBVV40C1FK50S1P0KC
        type: string
      status:
        allOf:
        - $ref: '#/definitions/PaymentStatus'
        enum:
        - paid
        - cancelled
        - pending
        example: paid
      title:
        example: Supermercado
        type: string
      type:
        allOf:
        - $ref: '#/definitions/PaymentType'
        enum:
        - expense
        - income
        - invoice
        - detail
        example: expense
      userId:
        example: realfabecker@gmail
        type: string
      value:
        example: 200
        minimum: 1
        type: number
    required:
    - description
    - dueDate
    - id
    - title
    - userId
    - value
    type: object
  PaymentStatus:
    enum:
    - paid
    - pending
    - cancelled
    type: string
    x-enum-varnames:
    - PaymentPaid
    - PaymentPending
    - PaymentCancelled
  PaymentType:
    enum:
    - expense
    - income
    type: string
    x-enum-varnames:
    - PaymentTypeExpense
    - PaymentTypeIncome
  ResponseDTO-PagedDTO-Payment:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/PagedDTO-Payment'
      message:
        example: Operação realizada com sucesso
        type: string
      status:
        example: success
        type: string
    type: object
  ResponseDTO-PagedDTO-TransactionDetail:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/PagedDTO-TransactionDetail'
      message:
        example: Operação realizada com sucesso
        type: string
      status:
        example: success
        type: string
    type: object
  ResponseDTO-Payment:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/Payment'
      message:
        example: Operação realizada com sucesso
        type: string
      status:
        example: success
        type: string
    type: object
  ResponseDTO-TransactionDetail:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/TransactionDetail'
      message:
        example: Operação realizada com sucesso
        type: string
      status:
        example: success
        type: string
    type: object
  ResponseDTO-User:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/User'
      message:
        example: Operação realizada com sucesso
        type: string
      status:
        example: success
        type: string
    type: object
  ResponseDTO-UserToken:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/UserToken'
      message:
        example: Operação realizada com sucesso
        type: string
      status:
        example: success
        type: string
    type: object
  TransactionDetail:
    description: Invoice Detail information
    properties:
      createdAt:
        example: "2023-04-07T16:45:30Z"
        type: string
      description:
        example: Supermercado
        type: string
      id:
        example: 2023050701GXEH91YBVV40C1FK50S1P0KC
        type: string
      title:
        example: Supermercado
        type: string
      transactionId:
        example: 2023050701GXEH91YBVV40C1FK50S1P0XD
        type: string
      userId:
        example: realfabecker@gmail
        type: string
      value:
        example: 200
        minimum: 1
        type: integer
    required:
    - description
    - title
    - transactionId
    - userId
    - value
    type: object
  User:
    description: User information
    properties:
      id:
        example: realfabecker@gmail.com
        type: string
      name:
        example: Rafael Becker
        type: string
    type: object
  UserToken:
    properties:
      AccessToken:
        type: string
      AuthChallange:
        type: string
      AuthSession:
        type: string
      RefreshToken:
        type: string
    type: object
  WalletLoginChangeDTO:
    properties:
      email:
        type: string
      new_password:
        minLength: 6
        type: string
      session:
        type: string
    required:
    - email
    - new_password
    - session
    type: object
  WalletLoginDTO:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
info:
  contact: {}
  description: Wallet Rest API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Wallet Rest API
  version: "1.0"
paths:
  /auth/change:
    get:
      description: Change user password
      parameters:
      - description: Login payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/WalletLoginChangeDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseDTO-UserToken'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Change user password
      tags:
      - Auth
  /auth/login:
    get:
      description: Get user login by e-mail
      parameters:
      - description: Login payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/WalletLoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseDTO-UserToken'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get user login by e-mail
      tags:
      - Auth
  /transactions:
    get:
      description: List user transactions
      parameters:
      - description: Number of records
        in: query
        name: limit
        required: true
        type: number
      - description: Pagination token
        in: query
        name: page_token
        type: string
      - description: Payment due date
        in: query
        name: due_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseDTO-PagedDTO-Payment'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: List user transactions
      tags:
      - Transactions
    post:
      description: Create a new transaction record
      parameters:
      - description: Payment payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/Payment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseDTO-Payment'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Create a transaction
      tags:
      - Transactions
    put:
      description: Update/Create a transaction record
      parameters:
      - description: Payment id
        in: path
        name: id
        required: true
        type: string
      - description: Payment payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/Payment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseDTO-Payment'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Put a transaction
      tags:
      - Transactions
  /transactions/{id}:
    delete:
      description: Delete transaction
      parameters:
      - description: Payment id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/EmptyResponseDTO'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Delete transaction
      tags:
      - Transactions
    get:
      description: Get transaction by id
      parameters:
      - description: Payment id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseDTO-Payment'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get transaction by id
      tags:
      - Transactions
  /transactions/{id}/detail:
    post:
      description: Create a new transaction detail record
      parameters:
      - description: TransactionDetail payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/TransactionDetail'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseDTO-TransactionDetail'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Create a transaction detail
      tags:
      - Transactions
  /transactions/{id}/details:
    get:
      description: List transaction details
      parameters:
      - description: Number of records
        in: query
        name: limit
        required: true
        type: number
      - description: Pagination token
        in: query
        name: page_token
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseDTO-PagedDTO-TransactionDetail'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: List transaction details
      tags:
      - Transactions
  /transactions/{transactionId}/details/{detailId}:
    get:
      description: Get transaction detail by id
      parameters:
      - description: Transaction id
        in: path
        name: transactionId
        required: true
        type: string
      - description: Detail id
        in: path
        name: detailId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseDTO-TransactionDetail'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get transaction detail by id
      tags:
      - Transactions
  /users/profile:
    get:
      description: Get user information by e-mail
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResponseDTO-User'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get user by e-mail
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    description: Type 'Bearer ' and than your API token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
